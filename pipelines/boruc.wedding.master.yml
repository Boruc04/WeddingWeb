trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    version: '3.1.x'
  displayName: Use Dot Net.

- task: gitversion/setup@0
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: '.\pipelines\GitVersion\GitVersion.yml'
    additionalArguments: '/updateprojectfiles'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      echo "Major: ${{ steps.gitversion.outputs.major }}"
      echo "Minor: ${{ steps.gitversion.outputs.minor }}"
      echo "Patch: ${{ steps.gitversion.outputs.patch }}"
      echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
      echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
      echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
      echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
      echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
      echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
      echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
      echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
      echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
      echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
      echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
      echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
      echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
      echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
      echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
      echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
      echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
      echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
      echo "Sha: ${{ steps.gitversion.outputs.sha }}"
      echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
      echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
      echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
      echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
      echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
      echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
      echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
      echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
      echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
      echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
  displayName: Create build artifact

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'WeddingWeb'
  displayName: Publish build artifact.